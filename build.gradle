buildscript {
    repositories {
        gradlePluginPortal()
    }
    dependencies {
        //jhipster-needle-gradle-buildscript-dependency - JHipster will add additional gradle build script plugins here
    }
}

plugins {
    id "java"
    id "org.openapi.generator"
    id "jacoco"
    id "org.springframework.boot"
    id "com.gorylenko.gradle-git-properties"
    id "org.sonarqube"
    id 'pmd'
    id 'checkstyle'
    id "com.github.spotbugs"
    //jhipster-needle-gradle-plugins - JHipster will add additional gradle plugins here
}

group = "com.itsmartflex.ms.eir.management"

java.sourceCompatibility = '21'
java.targetCompatibility = '21'
assert System.properties["java.specification.version"] == "21"

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

apply from: "$projectDir/gradle/swagger.gradle"
apply from: "$projectDir/gradle/jacoco.gradle"
apply from: "$projectDir/gradle/sonar.gradle"

//jhipster-needle-gradle-apply-from - JHipster will add additional gradle scripts to be applied here

if (project.hasProperty("prod")) {
    apply from: "gradle/profile_prod.gradle"
} else {
    apply from: "gradle/profile_dev.gradle"
}

defaultTasks "bootRun"

springBoot {
    mainClass = "com.itsmartflex.ms.eir.EirManagementApp"
}

Closure testLoggingConf = {
    exceptionFormat = 'full'
    events "standardOut", "started", "passed", "skipped", "failed"
}

test {
    classes.mustRunAfter 'clean'
    systemProperty "spring.profiles.active", "test"
    include '**/*Test.class'
    maxParallelForks = 4

    // to run all test that was not categorized
    useJUnitPlatform()

    // uncomment if the tests reports are not generated
    // see https://github.com/jhipster/generator-jhipster/pull/2771 and https://github.com/jhipster/generator-jhipster/pull/4484
    // ignoreFailures true
    reports.html.required = true
    testLogging testLoggingConf
}

task testReport(type: TestReport) {
    destinationDirectory = file(project.layout.buildDirectory.dir("/reports/tests").get().toString())
    testResults.from(test)
}

if (!project.hasProperty("runList")) {
    project.ext.runList = "main"
}

gitProperties {
    failOnNoGitDirectory = false
    keys = ["git.branch", "git.commit.id.abbrev", "git.commit.id.describe"]
}

checkstyle {
    checkstyleMain.source = "src/main/java"
    checkstyleMain.exclude '**/openapi/**'
    toolVersion "${checkstyleToolVersion}"
    configFile file("qa/checkstyle.xml")
    checkstyleTest.enabled = true
}

spotbugs {
    toolVersion = "${spotbugsToolVersion}"
    ignoreFailures = true
}

pmd {
    toolVersion "${pmdToolVersion}"
    ignoreFailures = true
}

configurations {
    providedRuntime
    implementation.exclude module: "spring-boot-starter-tomcat"
}

repositories {
    // Local maven repository is required for libraries built locally with maven like development jhipster-bom.
    mavenCentral()
    mavenLocal()
    maven {
        name "${artifactory_release_repo}"
        url "$itsf_artifactory_contextUrl/libs-release-local/"
        allowInsecureProtocol true

        credentials {
            username itsf_artifactory_user
            password itsf_artifactory_password
        }
    }
//jhipster-needle-gradle-repositories - JHipster will add additional repositories
}

dependencies {

    compileOnly "org.projectlombok:lombok:${lombok_version}"
    annotationProcessor "org.projectlombok:lombok:${lombok_version}"

    implementation platform("tech.jhipster:jhipster-dependencies:${jhipsterDependenciesVersion}")
    implementation group: "tech.jhipster", name: "jhipster-framework"
    implementation "jakarta.annotation:jakarta.annotation-api"

    implementation "io.micrometer:micrometer-registry-prometheus"
    implementation 'io.micrometer:micrometer-tracing'
    implementation 'io.micrometer:micrometer-core'
    implementation 'io.micrometer:micrometer-observation'
    implementation "io.micrometer:micrometer-tracing-bridge-brave"

    implementation "com.fasterxml.jackson.core:jackson-annotations"
    implementation "com.fasterxml.jackson.core:jackson-databind"
    implementation "org.hibernate.orm:hibernate-core:${hibernateVersion}"
    implementation "com.zaxxer:HikariCP"
    implementation "org.apache.commons:commons-lang3"
    implementation "org.openapitools:jackson-databind-nullable:${jacksonDatabindNullableVersion}"
    implementation "jakarta.transaction:jakarta.transaction-api"
    implementation "org.hibernate.validator:hibernate-validator"

    implementation "org.springframework.boot:spring-boot-loader-tools"
    implementation "org.springframework.boot:spring-boot-starter-logging"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"

    implementation "org.springframework.boot:spring-boot-starter-security"
    implementation("org.springframework.boot:spring-boot-starter-web") {
        exclude module: "spring-boot-starter-tomcat"
    }
    implementation "org.springframework.boot:spring-boot-starter-undertow"

    implementation "org.springframework.cloud:spring-cloud-starter"
    implementation "org.springframework.cloud:spring-cloud-starter-bootstrap"
    implementation "org.springframework.security:spring-security-config"
    implementation "org.springframework.security:spring-security-data"
    implementation "org.springframework.security:spring-security-web"
    implementation "org.postgresql:postgresql"

    implementation("org.springdoc:springdoc-openapi-starter-webmvc-ui")
        {
            exclude group: "io.swagger.core.v3", module: "swagger-core"
        }
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor:${springBootVersion}"

    implementation("com.icthh.xm.commons:xm-commons-ms-web:${xm_commons_version}") {
        exclude group: "io.github.jhipster", module: "jhipster-framework"
    }
    implementation("com.icthh.xm.commons:xm-commons-tenant-endpoint:${xm_commons_version}")

    implementation("io.swagger.core.v3:swagger-core:${swaggerVersion}")

    implementation "com.icthh.xm.commons:xm-commons-i18n:${xm_commons_version}"
    implementation("com.icthh.xm.commons:xm-commons-permission:${xm_commons_version}") {
        exclude group: "com.icthh.xm.commons", module: "xm-commons-tenant"
    }
    implementation "com.icthh.xm.commons:xm-commons-metric:${xm_commons_version}"

    testCompileOnly "org.projectlombok:lombok:${lombok_version}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombok_version}"
    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.springframework.security:spring-security-test"
    testImplementation "org.springframework.boot:spring-boot-test"
    developmentOnly "org.springframework.boot:spring-boot-devtools:${springBootVersion}"
    //jhipster-needle-gradle-dependency - JHipster will add additional dependencies here
}

subprojects {

    repositories {
        // Local maven repository is required for libraries built locally with maven like development jhipster-bom.
        mavenLocal()
        mavenCentral()
        //jhipster-needle-gradle-repositories - JHipster will add additional repositories
        maven {
            name 'artifactory-release-local'
            url "$itsf_artifactory_contextUrl/libs-release-local/"
            allowInsecureProtocol true
            credentials {
                username itsf_artifactory_user
                password itsf_artifactory_password
            }
        }
    }
}

task cleanResources(type: Delete) {
    delete "build/resources"
}

wrapper {
    gradleVersion = "8.9"
}

sonarqube {
    skipProject = true
}

//compileJava {
//    dependsOn processResources
//    // add method parameters names to .class (used by LEP scripts)
//    options.compilerArgs << '-parameters'
//}
//compileJava.dependsOn processResources
processResources.dependsOn bootBuildInfo
