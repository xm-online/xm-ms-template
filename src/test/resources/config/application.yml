management:
  prometheus:
    metrics:
      export:
        enabled: false

spring:
  profiles:
    # Uncomment the following line to enable tests against production database type rather than H2, using Testcontainers
    #active: testcontainers
  application:
    name: mstemplate
  cloud:
    consul:
      discovery:
        enabled: false
        instanceId: ${spring.application.name}:${spring.application.instance-id:${random.value}}
      config:
        enabled: false
      enabled: false
    stream:
      kafka:
        binder:
          autoCreateTopics: false
  # Replace by 'prod, faker' to add the faker context and have sample data loaded in production
  liquibase:
    contexts: test
  datasource:
    type: com.zaxxer.hikari.HikariDataSource
    url: jdbc:h2:mem:mstemplate;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
    name:
    username:
    password:
    hikari:
      auto-commit: false
  jackson:
    serialization:
      write-durations-as-timestamps: false
  mail:
    host: localhost
  main:
    allow-bean-definition-overriding: true
  messages:
    basename: i18n/messages
  task:
    execution:
      thread-name-prefix: xm-ms-template-task-
      pool:
        core-size: 1
        max-size: 50
        queue-capacity: 10000
    scheduling:
      thread-name-prefix: xm-ms-template-scheduling-
      pool:
        size: 20
  thymeleaf:
    mode: HTML
  security:
    oauth2:
      client:
        provider:
          uaa:
            token-uri: http://localhost:9999/oauth/token
        registration:
          uaa:
            authorization-grant-type: client_credentials
            client-id: internal
            client-secret: internal

server:
  port: 10344
  address: localhost

jhipster:
  clientApp:
    name: 'mstemplateApp'
  api-docs:
    default-include-pattern: ${server.servlet.context-path:}/api/**
    management-include-pattern: ${server.servlet.context-path:}/management/**
    title: Mstemplate API
    description: Mstemplate API documentation
  security:
    authentication:
      jwt:
        # This token must be encoded using Base64 (you can type `echo 'secret-key'|base64` on your command line)
        base64-secret: MTk2MzFmZjU1MWNhMTVhNjg4Yjk5ZmFlOGFhNWQ4MGU0MDc2MTg5NTA4MGE1ZTlmMTgxZWEwYTdjM2JjNjQ1MjkyNTBmMTI0MzE5NzM3M2NhNzNhZTQ4ZTZkN2UwMzNlYzRjMjg4ZTEzN2EwZDE0ODI2NTRkYmI2ZTE5MzMyNTg=
        # Token is valid 24 hours
        token-validity-in-seconds: 86400
        token-validity-in-seconds-for-remember-me: 86400

xm-config:
  enabled: false

application:
  tenant-ignored-path-list: /v2/api-docs, /api/profile-info, /swagger-resources/configuration/ui, /management/health, /management/prometheus
  timelines-enabled: false
  specification-path-pattern: /config/tenants/{tenantName}/${spring.application.name}/example-of-microservice-spec.yml
  scheduler-enabled: false
  kafka-enabled: false
